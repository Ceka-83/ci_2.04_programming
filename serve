#!/usr/bin/env ruby

require 'webrick'
require "rubygems"

loop do
  begin
    require "haml"
    break if defined?(Haml)
  rescue LoadError => ex
    puts "Haml Gem not installed -> will install"
    puts system('gem install haml')
    Gem.clear_paths
  end
end

loop do
  begin
    require "kramdown"
    break if defined?(Kramdown)
  rescue LoadError => ex
    puts "Kramdown Gem not installed -> will install"
    puts system('gem install kramdown')
    Gem.clear_paths
  end
end

if ARGV.include? "-l"
  $layout = ARGV["-l"]
else
  $layout = "layout.haml"
end

begin
  layout_content = File.open($layout) {|io| io.read }

  $template = Haml::Engine.new(
    layout_content,
    attr_wrapper: '"',
    filename: @layout)

rescue Haml::Error => error
  puts "Template Error in line '#{error.line}': #{error.message}"
  exit 2

rescue Exception => ex
  puts ex.message
  exit 1
end

class HamlHandler < WEBrick::HTTPServlet::AbstractServlet

  def initialize(server, name)
    super
    @script_filename = name
    @filename = "#{name}.haml"

    puts "Handle file '#{@filename}'"
  end

  def do_GET(req, res)
    puts "Have #{@filename}"
    begin
      data = open(@filename) {|io| io.read }

      res.body = parse_haml(data)
      res['content-type'] = 'text/html'

    rescue StandardError => ex
      raise

    rescue Exception => ex
      raise HTTPStatus::InternalServerError, ex.message

    end
  end

  alias do_POST do_GET

  private
  def parse_haml(string)
    engine = Haml::Engine.new(string,
      attr_wrapper: '"',
      filename: @script_filename)

    puts "Render inside template"
    $template.render(locals: {title: @script_filename}) do
      engine.render
    end
  end
end

WEBrick::HTTPServlet::FileHandler.remove_handler("html")
WEBrick::HTTPServlet::FileHandler.add_handler("html", HamlHandler)

root_path = __dir__

server = WEBrick::HTTPServer.new Port: 8000, DocumentRoot: root_path

puts "Server started go to: http://localhost:8000"

trap("INT") { server.shutdown }

server.start
